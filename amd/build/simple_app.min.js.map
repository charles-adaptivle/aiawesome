{"version":3,"file":"simple_app.min.js","sources":["../src/simple_app.js"],"sourcesContent":["/**\n * AI Awesome Vanilla JS Application\n *\n * @module     local_aiawesome/simple_app\n * @copyright  2025 Charles Horton <charles@adaptivle.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { getString } from 'core/str';\nimport { getCurrentCourseId, generateSessionId } from './boot';\n\n/**\n * Mount the simple chat interface to the drawer.\n *\n * @param {Element} container - Container element\n * @returns {Promise<void>}\n */\nexport async function mount(container) {\n    if (!container) {\n        throw new Error('Container element is required');\n    }\n\n    // Get localized strings\n    const strings = await getLocalizedStrings();\n    \n    // Create the chat interface\n    createChatInterface(container, strings);\n    \n    // Set up event handlers\n    setupEventHandlers(container, strings);\n}\n\n/**\n * Get localized strings.\n *\n * @returns {Promise<Object>} Localized strings\n */\nasync function getLocalizedStrings() {\n    const stringKeys = [\n        'chat_placeholder',\n        'chat_send',\n        'chat_stop',\n        'chat_clear',\n        'chat_close',\n        'error_network',\n        'error_server'\n    ];\n\n    const strings = {};\n    for (const key of stringKeys) {\n        try {\n            strings[key] = await getString(key, 'local_aiawesome');\n        } catch (error) {\n            // Fallback to English\n            strings[key] = getEnglishFallback(key);\n        }\n    }\n    \n    return strings;\n}\n\n/**\n * Get English fallback for string keys.\n *\n * @param {string} key - String key\n * @returns {string} Fallback string\n */\nfunction getEnglishFallback(key) {\n    const fallbacks = {\n        'chat_placeholder': 'Ask me anything about this course...',\n        'chat_send': 'Send',\n        'chat_stop': 'Stop',\n        'chat_clear': 'Clear chat',\n        'chat_close': 'Close',\n        'error_network': 'Network error. Please check your connection.',\n        'error_server': 'Server error. Please try again later.'\n    };\n    \n    return fallbacks[key] || key;\n}\n\n/**\n * Create the chat interface HTML.\n *\n * @param {Element} container - Container element\n * @param {Object} strings - Localized strings\n */\nfunction createChatInterface(container, strings) {\n    container.innerHTML = `\n        <div class=\"aiawesome-app\">\n            <!-- Header -->\n            <div class=\"aiawesome-header\">\n                <h3 class=\"aiawesome-title\">AI Chat Assistant</h3>\n                <button class=\"aiawesome-close-btn\" data-action=\"close\" \n                        aria-label=\"${strings.chat_close}\" title=\"${strings.chat_close}\">\n                    <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                </button>\n            </div>\n            \n            <!-- Messages Container -->\n            <div class=\"aiawesome-messages\" id=\"aiawesome-messages\">\n                <div class=\"aiawesome-welcome\">\n                    <div class=\"aiawesome-message aiawesome-message-assistant\">\n                        <div class=\"aiawesome-message-content\">\n                            <p>ðŸ‘‹ Hello! I'm your AI assistant. I can help you with questions about this course and your learning.</p>\n                            <p>What would you like to know?</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- Input Area -->\n            <div class=\"aiawesome-input-area\">\n                <form class=\"aiawesome-input-form\" id=\"aiawesome-input-form\">\n                    <div class=\"aiawesome-input-container\">\n                        <textarea class=\"aiawesome-input\" \n                                id=\"aiawesome-input\" \n                                placeholder=\"${strings.chat_placeholder}\"\n                                rows=\"1\"\n                                maxlength=\"2000\"></textarea>\n                        <button type=\"submit\" \n                                class=\"aiawesome-send-btn\" \n                                id=\"aiawesome-send-btn\"\n                                aria-label=\"${strings.chat_send}\">\n                            <i class=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\n                        </button>\n                    </div>\n                    <div class=\"aiawesome-actions\">\n                        <button type=\"button\" \n                                class=\"aiawesome-action-btn aiawesome-stop-btn\" \n                                id=\"aiawesome-stop-btn\" \n                                style=\"display: none;\"\n                                aria-label=\"${strings.chat_stop}\">\n                            <i class=\"fa fa-stop\" aria-hidden=\"true\"></i>\n                            ${strings.chat_stop}\n                        </button>\n                        <button type=\"button\" \n                                class=\"aiawesome-action-btn aiawesome-clear-btn\" \n                                id=\"aiawesome-clear-btn\"\n                                aria-label=\"${strings.chat_clear}\">\n                            <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                            ${strings.chat_clear}\n                        </button>\n                    </div>\n                </form>\n            </div>\n            \n            <!-- Status -->\n            <div class=\"aiawesome-status\" id=\"aiawesome-status\" style=\"display: none;\"></div>\n        </div>\n    `;\n}\n\n/**\n * Set up event handlers for the chat interface.\n *\n * @param {Element} container - Container element\n * @param {Object} strings - Localized strings\n */\nfunction setupEventHandlers(container, strings) {\n    const form = container.querySelector('#aiawesome-input-form');\n    const input = container.querySelector('#aiawesome-input');\n    const sendBtn = container.querySelector('#aiawesome-send-btn');\n    const stopBtn = container.querySelector('#aiawesome-stop-btn');\n    const clearBtn = container.querySelector('#aiawesome-clear-btn');\n    const closeBtn = container.querySelector('[data-action=\"close\"]');\n    const messagesContainer = container.querySelector('#aiawesome-messages');\n    const statusDiv = container.querySelector('#aiawesome-status');\n    \n    let isStreaming = false;\n    let currentAbortController = null;\n    let sessionId = generateSessionId();\n\n    // Auto-resize textarea\n    input.addEventListener('input', function() {\n        this.style.height = 'auto';\n        this.style.height = Math.min(this.scrollHeight, 120) + 'px';\n    });\n\n    // Handle form submission\n    form.addEventListener('submit', async function(e) {\n        e.preventDefault();\n        \n        const message = input.value.trim();\n        if (!message || isStreaming) return;\n        \n        // Add user message to chat\n        addMessage('user', message);\n        \n        // Clear input and reset height\n        input.value = '';\n        input.style.height = 'auto';\n        \n        // Start streaming\n        await startStreaming(message);\n    });\n\n    // Handle stop button\n    stopBtn.addEventListener('click', function() {\n        if (currentAbortController) {\n            currentAbortController.abort();\n        }\n        stopStreaming();\n    });\n\n    // Handle clear button\n    clearBtn.addEventListener('click', function() {\n        if (confirm('Clear all messages?')) {\n            clearMessages();\n        }\n    });\n\n    // Handle close button\n    closeBtn.addEventListener('click', function() {\n        // Close the drawer\n        const drawer = container.closest('#aiawesome-drawer');\n        if (drawer) {\n            drawer.classList.remove('open');\n            drawer.setAttribute('aria-hidden', 'true');\n            drawer.style.transform = 'translateX(100%)';\n            setTimeout(() => {\n                drawer.style.display = 'none';\n            }, 300);\n        }\n    });\n\n    /**\n     * Add a message to the chat.\n     *\n     * @param {string} role - Message role (user, assistant, system)\n     * @param {string} content - Message content\n     * @returns {Element} Message element\n     */\n    function addMessage(role, content) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `aiawesome-message aiawesome-message-${role}`;\n        \n        const contentDiv = document.createElement('div');\n        contentDiv.className = 'aiawesome-message-content';\n        contentDiv.textContent = content;\n        \n        messageDiv.appendChild(contentDiv);\n        messagesContainer.appendChild(messageDiv);\n        \n        // Scroll to bottom\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        \n        return messageDiv;\n    }\n\n    /**\n     * Start streaming response from AI.\n     *\n     * @param {string} message - User message\n     */\n    async function startStreaming(message) {\n        isStreaming = true;\n        sendBtn.style.display = 'none';\n        stopBtn.style.display = 'inline-flex';\n        \n        // Add empty assistant message for streaming\n        const assistantMessage = addMessage('assistant', '');\n        const contentDiv = assistantMessage.querySelector('.aiawesome-message-content');\n        \n        // Add thinking indicator\n        contentDiv.innerHTML = '<span class=\"aiawesome-thinking\">ðŸ’­ Thinking...</span>';\n        \n        try {\n            currentAbortController = new AbortController();\n            \n            const courseId = getCurrentCourseId();\n            const requestData = {\n                query: message,\n                session: sessionId,\n                courseid: courseId,\n                sesskey: M.cfg.sesskey\n            };\n\n            const response = await fetch(M.cfg.wwwroot + '/local/aiawesome/stream.php', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest',\n                },\n                body: JSON.stringify(requestData),\n                credentials: 'include',\n                signal: currentAbortController.signal\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n            let buffer = '';\n            let content = '';\n\n            // Clear thinking indicator\n            contentDiv.innerHTML = '';\n\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done) break;\n\n                buffer += decoder.decode(value, { stream: true });\n                const lines = buffer.split('\\n');\n                buffer = lines.pop();\n\n                for (const line of lines) {\n                    if (line.startsWith('data: ')) {\n                        try {\n                            const data = JSON.parse(line.substring(6));\n                            // Handle OpenAI streaming format\n                            if (data.choices && data.choices[0] && data.choices[0].delta && data.choices[0].delta.content) {\n                                content += data.choices[0].delta.content;\n                                contentDiv.textContent = content;\n                                messagesContainer.scrollTop = messagesContainer.scrollHeight;\n                            }\n                        } catch (e) {\n                            // Ignore parse errors\n                        }\n                    }\n                }\n            }\n\n            // If no content was received, show error\n            if (!content) {\n                contentDiv.textContent = 'Sorry, I encountered an error processing your request.';\n                contentDiv.className += ' aiawesome-error';\n            }\n\n        } catch (error) {\n            if (error.name === 'AbortError') {\n                contentDiv.textContent = 'Response cancelled.';\n            } else {\n                contentDiv.textContent = 'Sorry, I encountered an error: ' + error.message;\n                contentDiv.className += ' aiawesome-error';\n            }\n        } finally {\n            stopStreaming();\n        }\n    }\n\n    /**\n     * Stop streaming and reset UI.\n     */\n    function stopStreaming() {\n        isStreaming = false;\n        sendBtn.style.display = 'inline-flex';\n        stopBtn.style.display = 'none';\n        currentAbortController = null;\n    }\n\n    /**\n     * Clear all messages.\n     */\n    function clearMessages() {\n        messagesContainer.innerHTML = `\n            <div class=\"aiawesome-welcome\">\n                <div class=\"aiawesome-message aiawesome-message-assistant\">\n                    <div class=\"aiawesome-message-content\">\n                        <p>ðŸ‘‹ Hello! I'm your AI assistant. I can help you with questions about this course and your learning.</p>\n                        <p>What would you like to know?</p>\n                    </div>\n                </div>\n            </div>\n        `;\n        sessionId = generateSessionId();\n    }\n}"],"names":["getEnglishFallback","key","container","Error","strings","stringKeys","error","getLocalizedStrings","innerHTML","chat_close","chat_placeholder","chat_send","chat_stop","chat_clear","createChatInterface","form","querySelector","input","sendBtn","stopBtn","clearBtn","closeBtn","messagesContainer","isStreaming","currentAbortController","sessionId","addMessage","role","content","messageDiv","document","createElement","className","contentDiv","textContent","appendChild","scrollTop","scrollHeight","startStreaming","message","style","display","AbortController","courseId","requestData","query","session","courseid","sesskey","M","cfg","response","fetch","wwwroot","method","headers","body","JSON","stringify","credentials","signal","ok","status","statusText","reader","getReader","decoder","TextDecoder","buffer","done","value","read","decode","stream","lines","split","pop","line","startsWith","data","parse","substring","choices","delta","e","name","stopStreaming","clearMessages","addEventListener","height","Math","min","this","async","preventDefault","trim","abort","confirm","drawer","closest","classList","remove","setAttribute","transform","setTimeout","setupEventHandlers"],"mappings":"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"}